{
	// Place your kattis workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	"include": {
		"scope": "cpp",
		"prefix": "include",
		"body": [
			"#pragma GCC optimize (\"O3\")",
			"#include <bits/stdc++.h>",
			"",
			"template <class T, class U>",
			"class Comparator {",
			"    std::function<U (const T&)> _f;",
			"    public:",
			"        Comparator(const decltype(_f)& f) : _f(f) {}",
			"        bool operator()(const T& u, const T& v) const noexcept { return _f(u) < _f(v); }",
			"};",
			"",
			"template <class T>",
			"class SquareMatrix {",
			"    size_t _n;",
			"    std::vector<std::vector<T>> _mat;",
			"    public:",
			"        SquareMatrix(size_t n) : _n(n), _mat(n) { for (std::vector<T>& row : _mat) row.resize(n); }",
			"        SquareMatrix<T>& operator*=(const SquareMatrix<T>&);",
			"        T& get(size_t i, size_t j) { return _mat[i][j]; }",
			"        const T& get(size_t i, size_t j) const { return _mat[i][j]; }",
			"        size_t n(void) const noexcept { return _n; }",
			"};",
			"",
			"/**",
			" *  Code starts here",
			" */",
			"",
			"int main() {",
			"    std::ios_base::sync_with_stdio(false);",
			"    std::cin.tie(nullptr);",
			"    $0",
			"    return 0;",
			"}",
			"",
			"/**",
			" *  Code ends here",
			" */",
			"",
			"template <class T>",
			"SquareMatrix<T>& SquareMatrix<T>::operator*=(const SquareMatrix<T>& rhs) {",
			"    if (_n != rhs.n()) {",
			"        exit(-1);",
			"    }",
			"    SquareMatrix<T> buf(_n);",
			"    for (size_t i = 0; i < _n; ++i) {",
			"        for (size_t j = 0; j < _n; ++j) {",
			"            for (size_t k = 0; k < _n; ++k) {",
			"                buf.get(i, j) += get(i, k) * rhs.get(k, j);",
			"            }",
			"        }",
			"    }",
			"    return *this = buf;",
			"}",
			"",
			"template <class T>",
			"SquareMatrix<T> operator*(SquareMatrix<T> lhs, const SquareMatrix<T>& rhs) {",
			"    return lhs *= rhs;",
			"}",
		],
		"description": "Default template"
	}
}